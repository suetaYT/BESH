version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - app-network
    volumes:
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - INSTALL_IMAGEMAGICK=true
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - ALLOWED_HOSTS=localhost,127.0.0.1,77.222.38.140,xn----btbkc5gbd.xn--p1ai,*
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres
      - SECRET_KEY=your-secret-key-here
      - CORS_ALLOWED_ORIGINS=http://localhost,http://127.0.0.1,http://77.222.38.140,http://xn----btbkc5gbd.xn--p1ai,https://xn----btbkc5gbd.xn--p1ai
      - CORS_ALLOW_ALL_ORIGINS=True
      - PYTHONUNBUFFERED=1
      - MEDIA_URL=/media/
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - backend_media:/app/media
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    ports:
      - "5432:5432"

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - frontend

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  backend_media: 